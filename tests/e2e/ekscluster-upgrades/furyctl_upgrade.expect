#!/usr/bin/expect -f
# Copyright (c) 2017-present SIGHUP s.r.l All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.


# Increase timeout as needed:
set timeout 3600
puts "Current working directory: $env(PWD)"
if {[llength $argv] == 0} {
    puts "Usage: furyctl_apply.expect /path/to/furyctl.yaml"
    exit 1
}


if {[llength $argv] >= 2} { 
    set outdir [lindex $argv 1] 
    puts "Using specified output directory: $outdir" 
} else { 
    set outdir $env(PWD) 
    puts "Using current directory as output directory: $outdir" 
}

set configFilePath [lindex $argv 0]
# Verify that necessary AWS environment variables exist.
if { ![info exists env(AWS_ACCESS_KEY_ID)] || \
     ![info exists env(AWS_SECRET_ACCESS_KEY)] || \
     ![info exists env(AWS_REGION)] } {
    puts "One or more AWS environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION) are not set."
    exit 1
}


# Determine if --distro-location flag should be used
set distroLocation ""
if {[llength $argv] >= 3} {
    set distroLocation [lindex $argv 2]
}

# Start furyctl apply.
if {$distroLocation ne ""} {
    spawn furyctl apply --upgrade --outdir $outdir --config $configFilePath --force upgrades --disable-analytics --distro-location $distroLocation
} else {
    spawn furyctl apply --upgrade --outdir $outdir --config $configFilePath --force upgrades --disable-analytics
}
set furyctl_id $spawn_id

expect {

     -re {.*Are you sure you want to continue\? Only 'yes' will be accepted to confirm.*} {
        puts "Confirmation prompt detected, sending 'yes'"
        send -i $furyctl_id "yes\r"
        exp_continue
    }
    timeout {
        puts "Timed out waiting for the interactive prompt."
        catch {kill -s INT [exp_pid -i $furyctl_id]}
        sleep 5
        exit 1
    }
    eof {
        puts "furyctl process ended."
    }
}


# Wait until furyctl has finished and capture its exit code
set exit_code 0
if {[catch {wait -i $furyctl_id} result]} {
    puts "Process already exited, trying to get exit code from result: $result"
    # Try to extract exit code from the result if possible
    if {[llength $result] >= 4} {
        set exit_code [lindex $result 3]
    }
} else {
    # Normal case: extract exit code from wait result
    puts "Furyctl exit status: $result"
    set exit_code [lindex $result 3]
}

puts "Script completed with exit code $exit_code."
rm -rf .furyctl ~/.furyctl /tmp/furyctl-* || true
exit $exit_code